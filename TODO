
The Big Picture:
----------------

Release 0.1: Basic functionality and main API

Release 0.2: Refactoring, menus, full event set,
             more complete functionality

Release 0.3: Less API change, focus on robustness
             and stability

Remaining objectives for version 0.1:
-------------------------------------
Tentative release date: December 10th, 2001

* Make sure all widgets support _ensure_text etc. in all
  backends

* Simplify the widget API by detaching models, using
  signals, update() and the Assignee protocol. (This
  may also be useful for LayoutManager code.)

* Change add() argument structure.

* Adjust defaults, and improve window staggering
  (needs a mechanism to find the top window)

* Update default wishlist to reflect new backends.

* Document special controls for cursesgui/textgui.

Objectives for version 0.2:
---------------------------
Tentative release date: February 28th, 2002

* Refactor to reduce code duplication (by moving things to
  the core), simplify the backend API, and reduce coupling
  between core and backends (having only the bare necessities
  actually _in_ the backends). Reevaluate the _ensure_foo
  strategy?

  Methods like _tk_clicked, which contain no backend-specific
  code, should be lifted to the front-end, and linked to
  event triggers in the backend's _ensure_events.

* Add support for __delattr__ (in the form of _del_foobar)
  in Mixins.Attrib, and make sure it's used where applicable
  in the various modules.

* Remove some redundante _ensure_foo calls, due to update()

* Add a dialog class

* Add support for native dialogs (e.g. file dialogs)

* Add menus (including popup menus?)

* Add full event system, based on messaging mechanism

* Add a grid-based layout mechanism
  (May require minimum_size and preferred_size properties)

* Add a Canvas widget for full graphics support

* Add an optional status bar to Window

Longer term goals:
------------------

* Add advanced support for default, including default
  "shrink-wrapping" of windows and frames that aren't
  given an explicit size; will require a "preferred
  size" for all widgets, based on font sizes etc.

* Support accessibility standards

* Add support for styled text

* Add support for importing xml files through xslt?
  (E.g. XUL)

* Add instant model update for text widgets, not just on
  "focus lost"?

* Add support for complex widgets (like wx tree widget,
  notebook, PMW-style widgets etc) with default
  implementations in the basic Anygui API (in the vein
  of the piddle/sping API)

* Make Anygui more thread-safe

Smaller issues:
---------------

* Add support for borders?

* Add .txt endings to README etc.

* Remove use of id(), since it doesn't work correctly in
  Jython.

* _Only_ attempt to use the backends in ANYGUI_WISHLIST,
  if any?
