
Remaining objectives for version 0.1:
-------------------------------------
Tentative release date: December 10th, 2001

* Finalise signal system/API

* Simplify the widget API by detaching models, using
  signals

* Adjust defaults, and improve window staggering

* Add Frame to all backends

* Separate layout mechanism from the Frame class (including
  the place() method), using signals

* Resolve the single-line/multi-line Label issue

* Only import weakrefs when necessary, to allow programs not
  using them to run in earlier versions of Python/Jython

* Adding and removing widgets from frames uses
  _ensure_created and _ensure_destroyed. It
  should be checked that this works consistently across
  backends. Also, reuse of backend widgets might be a
  nice alternative.

Objectives for version 0.2:
---------------------------
Tentative release date: February 28th, 2002

* Refactor to reduce code duplication (by moving things to
  the core), simplify the backend API, and reduce coupling
  between core and backends (having only the bare necessities
  actually _in_ the backends)

* Add support for __delattr__ (in the form of _del_foobar)
  in Mixins.Attrib, and make sure it's used where applicable
  in the various modules.

* Add a dialog class

* Add support for native dialogs (e.g. file dialogs)

* Add menus (including popup menus?)

* Add full event system, based on messaging mechanism

* Add a grid-based layout mechanism
  (May require minimum_size and preferred_size properties)

Longer term goals:
------------------

* Add advanced support for default, including default
  "shrink-wrapping" of windows and frames that aren't
  given an explicit size; will require a "preferred
  size" for all widgets, based on font sizes etc.

* Support accessibility standards

* Add a Canvas widget for full graphics support

* Add support for styled text

* Add support for importing xml files through xslt?
  (E.g. XUL)

* Add instant model update for text widgets, not just on
  "focus lost"?

* Add support for complex widgets (like wx tree widget,
  notebook, PMW-style widgets etc) with default
  implementations in the basic Anygui API (in the vein
  of the piddle/sping API)

* Make Anygui more thread-safe

Smaller issues:
---------------

* Add support for borders?

* Add .txt endings to README etc.
