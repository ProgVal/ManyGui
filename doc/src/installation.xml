  <section>
    <title>Installation</title>
    
    <para>The <name>Anygui</name> package comes in the form of a
    <code>gzip</code> compressed <code>tar</code> archive, a binary
    Windows installer and as an RPM package. The Windows installer and
    RPM package should be fairly easy to install. To install the
    <code>tar</code> archive, it you will first have to uncompress the
    archive. On <name>Windows</name> this can be done with
    <name>WinZip</name>. in <name>Mac OS</name>, you can use
    <name>StuffIt Expander</name>. In <name>Unix</name>, first move to
    a directory where you'd like to put <name>Anygui</name>, and then
    do something like the following:</para>

    <codelisting>
      <line>foo:~/python$ tar xzvf anygui-&longversion;.tar.gz</line>
    </codelisting>

    <para>If your version of tar doesn't support the <code>z</code>
    switch, you can do something like this:</para>

    <codelisting>
      <line>foo:~/python$ zcat anygui-&longversion;.tar.gz | tar xvf</line>
    </codelisting>

    <para>Another possibility is:</para>

    <codelisting>
      <line>foo:~/python$ gunzip anygui-&longversion;.tar.gz</line>
      <line>foo:~/python$ tar -xvf anygui-&longversion;.tar</line>
    </codelisting>

    <para>No matter which version you choose, you should end up with a
    directory named <code>anygui-&longversion;</code>.</para>

    <section>
      <title>Running setup.py</title>
      
      <para>The simple way of installing <name>Anygui</name> is to use
      the installation script that's included in the
      distribution. This requires <name>Distutils</name>
      (<url>http://www.python.org/sigs/distutils-sig</url>), which is
      included in <name>Python</name> distributions from version
      2.0. To install the <name>Anygui</name> package in the default
      location, simply run the setup script with the
      <code>install</code> command:</para>

      <codelisting>
	<line>foo:~$ python setup.py install</line>
      </codelisting>

      <para>This will install <name>Anygui</name> in your standard
      <name>Python</name> directory structure. If you don't have
      access to this directory (e.g. because <name>Python</name> was
      installed by a sysadmin, and you don't have root access) you can
      install it somewhere else with the <code>--prefix</code>
      option:</para>

      <codelisting>
	<line>foo:~$ python setup.py install --prefix=${HOME}/python</line>
      </codelisting>
    </section>

    <section>
      <title>Doing it Manually</title>

      <para>Since <name>Anygui</name> consists of only
      <name>Python</name> code, nothing needs to be compiled. And the
      only thing needed to install <name>Python</name> code is to
      ensure that the packages and modules are found by your
      <name>Python</name> interpreter. This is as simple as including
      the <code>lib</code> directory of the <name>Anygui</name>
      distribution in your <code>PYTHONPATH</code> environment
      variable. In <code>bash</code>
      (<url>http://www.gnu.org/manual/bash/</url>), you could do
      something like this:</para>

      <codelisting>
	<line>foo:~$ export PYTHONPATH=$PYTHONPATH:/path/to/anygui/lib</line>
      </codelisting>

      <para>To make this permanent, you should put it in your
      <code>.bash_profile</code> file, or something equivalent. If you
      don't want to mess around with this, and already have a standard
      directory where you place your <name>Python</name> modules, you
      can simply copy (or move) the <code>anygui</code> package (found
      in <code>anygui-&longversion;/lib</code>) there, or possibly
      place a symlink in that directory to the <code>anygui</code>
      package.</para>

    </section>

    <!--
    <section>
      <title>Distribution Layout</title>

      <para>[README, MAINTAINERS, LICENSE, etc.]</para>
    </section>
    -->

    <section>
      <title>Making Sure You Have a Usable GUI Package</title>

      <para>Once you have <name>Anygui</name> installed, you'll want
      to make sure you have a usable GUI package. This is easy to
      check: Simply start an interactive <name>Python</name>
      interpreter and try to execute the following:</para>

      <codelisting>
	<line>>>> from anygui import *</line>
	<line>>>> backend()</line>
      </codelisting>

      <para>The <code>backend</code> function will return the name of
      the backend in use. If it is neither <code>'curses'</code> nor
      <code>'text'</code> you should be all set for making GUI
      programs with <name>Anygui</name>. (The <code>'curses'</code>
      and <code>'text'</code> backends use plain text to emulate
      graphical interfaces on platforms that don't have them.)
      <name>Anygui</name> currently supports the following
      packages:</para>

      <codelisting>
	<line>PythonWin  (mswgui)    <url>http://starship.python.net/crew/mhammond/win32</url></line>
	<line>Tkinter    (tkgui)     <url>http://www.python.org/topics/tkinter</url></line>
	<line>wxPython   (wxgui)     <url>http://www.wxpython.org</url></line>
	<line>Java Swing (javagui)   <url>http://www.jython.org</url></line>
	<line>PyGTK      (gtkgui)    <url>http://www.daa.com.au/~james/pygtk</url></line>
	<line>Bethon     (beosgui)   <url>http://www.bebits.com/app/1564</url></line>
	<line>PyQt       (qtgui)     <url>http://www.thekompany.com/projects/pykde</url></line>
	<line>Curses     (cursesgui) -- used when no GUI package is available</line>
	<line>Plain text (textgui)   -- used if curses is not available</line>
      </codelisting>

      <para>Add <code>gui</code> to name returned by the
      <code>backend</code> function to get the full name of the
      backend module (in the <code>anygui.backends</code>
      package). For instance, the <code>msw</code> backend is found in
      <code>anygui.backends.mswgui</code> module.</para>

      <para>In general, if you end up with a text-based solution,
      <code>cursesgui</code> will be preferred over
      <code>textgui</code>if your <name>Python</name>-installation has
      a wrorking <code>curses</code> module. The exception is if you
      are using <name>Anygui</name> in the interactive interpreter, in
      which <code>textgui</code> will be preferred, to avoid
      interfering with the terminal and locking up the interpreter
      prompt. (If you'd like to, for some reason, you can override
      this behaviour with the environment variable
      <code>ANYGUI_FORCE_CURSES</code>; see the API Reference
      below.)</para>

      <para><strong>BeOS Note:</strong> The BeOS backend
      (<code>beosgui</code>) is currently not fully functional, but is
      included nonetheless.</para>

      <!--
      Matt's fixes to Bethon:
      
      http://www.chariot.net.au/~jaq/matt/BWindow.dx
      http://www.chariot.net.au/~jaq/matt/BTextView.dx

      Also available at anygui.sf.net/files

      Rebuild Bethon with these.
      -->

      <para>Of these, <name>Tkinter</name> is compiled in by default
      in the <name>MS Windows</name> distribution of
      <name>Python</name> (available from
      <url>http://www.python.org</url>), <name>PythonWin</name> (as
      well as <name>Tkinter</name>) is included in the
      <name>ActiveState</name> distribution, <name>ActivePython</name>
      (available from <url>http://www.activestate.com</url>), and
      <name>Java Swing</name> is automatically available in
      <name>Jython</name>, the <name>Java</name> implementation of
      <name>Python</name>.</para>

      <para><strong>Note:</strong> In <name>Mac OS</name> 9,
      <name>Anygui</name> (using <name>Tkinter</name>) works with with
      <name>Python Classic</name> and recent versions of <name>Python
      Carbon</name>, but older versions have problems with
      <name>Tkinter</name>.</para>

    </section>

  </section>
