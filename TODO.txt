
The Big Picture:
----------------

Release 0.2: Refactoring, menus, full event set, graphics,
             native dialogs; more complete functionality

Release 0.3: Less API change, focus on robustness
             and stability

Short-term Objectives/FIXMEs
----------------------------

* Add test suite for Rectangles.py. Change calls to self.set to
  self.modify to correctly interact with models

* Either allow the creation of windows before the application object,
  or rewrite tutorial (and other docs)

* Fix Model classes to work with push/pull mechanism; add 'modified'
  event (or something equivalent) to allow real-time notification to
  models, where needed

* Rewrite AbstractApplication; clear up prodding issue

* Clean up exception use (Exceptions module -- perhaps not needed)

* Clear up the issue of encapsulation wrt. attributes like container,
  contents/items, menubar, etc.

* Review layout manager mechanism

* Get more work done on a list of events

* Fix transformation push('position') -> push('x', 'y') etc.

Objectives for version 0.2a0:
-----------------------------

* Implement the functionality of release 0.1.1 with the new (0.2)
  architecture.

* Make sure push() and pull() work with in-place modification (and
  therby Models etc.) Let Wrapper.pull() simply return the correct
  dictionary for use in Proxy.rawModify()...?

* Clarify the requirements placed on Wrapper setters/getters (checks
  for "widget is None" etc.)

Objectives for version 0.2a1:
-----------------------------

* Fix default events so that their event type is the real type
  (e.g. 'click'), not 'default'.

* Fix Model functionality.

* Create a Container mixin for add() and remove(), and either a
  contents or items attribute? (With items it could be used with
  ListBox too, giving the possibility of adding and removing items...)

* Change Assignee to SmartValue, which also has support for Container
  objects (?)

* Change add() signature?

* Store LayoutInfo objects in LayoutManagers, not in the Proxies
  themselves. Return the LayoutInfo object(s) from calls to add() to
  allow the caller to modify it directly.

* Add font, alignment, and colour (?) (etc.) attributes to all
  relevant components.

New Components:

- Menus (including popup menus)
  
- Dialogs, including native dialogs (file dialog etc.)

Objectives for version 0.2a2:
-----------------------------

* Integrate an "event path" notion into the event framework,
  facilitating the use of callbacks in containers to react to events
  from child components, possibly through a "group" class which
  functions as an event-relaying container.

* Add support for complex widgets ("megawidgets") with default
  implementations in the basic Anygui API (in the vein of the
  piddle/sping API)

  In other words, give a standardised way of integrating
  backend-specific features into Anygui programs.

* Flesh out the event list

New Components

- Canvas widget with full graphics support

- Tree widget

- Notebook/tabbed pane widget

Objectives for version 0.2a3:
-----------------------------

* Adjust defaults, and improve window staggering
  (needs a mechanism to find the top window)

* Add support for __delattr__ (in the form of _del_foobar)
  in Mixins.Attrib, and make sure it's used where applicable
  in the various modules.

* Add a grid-based layout mechanism
  (May require minimum_size and preferred_size properties)
  Add utility for "visual" grid layout? (reStructuredText uses this
  sort of thing:
  http://docutils.sourceforge.net/docs/rst/quickref.html)

* Add advanced support for defaults, including default
  "shrink-wrapping" of windows and frames that aren't
  given an explicit size; will require a "preferred
  size" for all widgets, based on font sizes etc.

* Fix the setup() mechanism.

* Implement "full" event list

* Make event system thread-safe

New Components:

- Window status bar

- Combobox

- Progress bar

- Tables

Objectives for version 0.3:
---------------------------

* Thorough code inspection and testing to improve stability

* Implement a record/replay API for recording and simulating use of
  the GUI (on a logical level, rather than using mouse coordinates
  etc.)

  This could include using a parallel event set, with names like
  'simulate-click' (as a parallel to 'click') etc. Recording would
  then not need a separate API but could use ordinary events;
  simulation could simply send the 'simulate-foo' events which should
  be picked up and acted upon by the backend (which in turn would send
  out the appropriate 'foo' event).

* Add "applets" -- e.g. for the Gnome panel, KDE kpanel, WindowMaker
  dock, MacOS menu, Windows tray, etc. with a small window as
  fallback?

Longer term goals:
------------------

* Extend sync with further hinting capabilities, to allow partial
  updates (mainly for performance)

* Support accessibility standards

* Add support for styled text

* Implement modal (or disabled) windows

* Add support for XUL.

* Add instant model update for text widgets, not just on
  "focus lost"?

* Make Anygui more thread-safe

* Add constructive area geometry to Canvas

* Add toolbars (button bars) with menu shortcuts etc.

* Add PyKDE backend...

Smaller issues:
---------------

* Move stuff like clickHandlers that only send 'click' to
  the front-end?

* Add support for borders?

* Add a linkMethods (or something) function for callback support?

* Add more distribution types (e.g. windows installers, rpms etc.)

* Add examples on how to implement other types of event systems (with
  an event path etc.) with the Anygui dispatcher to the documentation.

* Document standard way of closing a window programmatically.

* Add a fallback mechanism, making it possible to "fall back" on some
  other interface, e.g. a cmd.Cmd object. Also add a wrapper mechanism
  to ease the use of cmd.Cmd objects as event handlers (which double
  as fallbacks). A possible "callback protocol" is to require the
  fallback to be callable, and to call it if no suitable backend (save
  e.g. cursesgui and textgui) is found.

* Add idle events, to facilitate "weaving" with other periodic tasks
  without using threads.

* Add tags to the event system.

* Allow all arguments to link and send to be supplied as keyword
  arguments.

* Add a "resizable" (or something) attribute to windows?

* Add scrollbars or scrollable frames (or both).

* Use default constructor arguments instead of Defaults module?

* Add rectangle properties (like those of Pygame) to components?

* Add support for other curses-like modules, like Fredrik Lundh's
  Console?
